								Lazy Loading in Angular(SPA)
							----------------------------------------------
							----------------------------------------------

	Definations -: Loading content whenever require or Runtime .
	
	1> create Your Custom module .
	2> move your component which you want to add in lazy loading custom computer .
	3> update custom module path in your route config as a string with loadChildren attributes of Routes
	
	
	
	
	Step 1> create xxx.module.ts and import @NgModule  i.e create custom module

	

	step 2> import commonmodule and RouetModule.forChild(config)

	step 3> Move Your component which You want to add in lazy loading in custom component
	
	step 4> create seperate Routes array which is coming from @angular/router and add their name to RouterModule.forchild()
		i.e for child routes inside RouterModule.forchild()
	
	Example : contactLazy.module.ts
		
	import { CommonModule } from '@angular/common';
	import { NgModule } from '@angular/core'
	import { Routes,RouterModule } from '@angular/router';
	import { ContactComponent } from './Contact.component';


	export const contactroute:Routes=[
 	   	{path:'',component:ContactComponent},
    		{path:'**',component:ErrorComponent}
	]


	@NgModule({

   	 declarations:[ContactComponent],
   	imports:[CommonModule,RouterModule.forChild(contactroute)],
    	providers:[],
    	exports:[ContactComponent]

	})

	export class ContactModule{

	}
		
	
	step 5> In Route.Config LoadChildren is used instead of component in Routes name
	
	Example -: route.config.ts
	
	import {Routes} from '@angular/router'
	import { AboutComponent } from './About/About.component'
	import { ContactComponent } from './Contact/Contact.component'
	import { HomeComponent } from './Home/Home.component'
	import { VisionComponent } from './Vision/Vision.component'

	export const myroute:Routes=[
    		{path:'',component:HomeComponent},
    		{path:'about',component:AboutComponent , children:[
        	{path:'vision',component:VisionComponent}
    	]},
    		{path:'contact',loadChildren:()=>import('./Contact/Contact.lazy').then(m=>m.ContactLazyModule)}
	]		


	step 6> separate chunk file is created when run Your application and this separate file called on browser when we click first time 

















	
		